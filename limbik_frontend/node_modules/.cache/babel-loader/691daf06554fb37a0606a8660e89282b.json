{"ast":null,"code":"var _jsxFileName = \"/home/michael/Development/limbik/limbik_frontend/src/components/table/index.js\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { Table } from 'semantic-ui-react';\nconst tableData = [];\n\nclass PostTable extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      column: null,\n      data: tableData,\n      direction: null\n    };\n\n    this.postStringShortener = string => {\n      if (string && string.length > 50) {\n        return string.slice(0, 50).concat('...');\n      } else if (string && string.length < 50) {\n        return string;\n      } else {\n        return 'no description';\n      }\n    };\n\n    this.getTableData = () => {\n      this.props.data.forEach(post => {\n        tableData.push({\n          postid: post.id,\n          text: this.postStringShortener(post.text),\n          clicks: post.clicks,\n          impressions: post.impressions,\n          currency: \"\".concat(post.spend.amount > 0 ? post.spend.amount : '', \"  \").concat(post.spend.currency ? post.spend.currency : 'None')\n        });\n      });\n    };\n\n    this.handleSort = clickedColumn => () => {\n      const _this$state = this.state,\n            column = _this$state.column,\n            data = _this$state.data,\n            direction = _this$state.direction;\n\n      if (column !== clickedColumn) {\n        this.setState({\n          column: clickedColumn,\n          data: _.sortBy(data, [clickedColumn]),\n          direction: 'ascending'\n        });\n        return;\n      }\n\n      this.setState({\n        data: data.reverse(),\n        direction: direction === 'ascending' ? 'descending' : 'ascending'\n      });\n    };\n  }\n\n  render() {\n    this.getTableData();\n    const _this$state2 = this.state,\n          column = _this$state2.column,\n          data = _this$state2.data,\n          direction = _this$state2.direction;\n    return React.createElement(\"div\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Table, {\n      sortable: true,\n      celled: true,\n      fixed: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Table.Header, {\n      className: \"table-head\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Table.Row, {\n      className: \"header-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Table.HeaderCell, {\n      sorted: column === 'postid' ? direction : null,\n      onClick: this.handleSort('postid'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Post ID\"), React.createElement(Table.HeaderCell, {\n      sorted: column === 'text' ? direction : null,\n      onClick: this.handleSort('text'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Text\"), React.createElement(Table.HeaderCell, {\n      sorted: column === 'clicks' ? direction : null,\n      onClick: this.handleSort('clicks'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Clicks\"), React.createElement(Table.HeaderCell, {\n      sorted: column === 'impressions' ? direction : null,\n      onClick: this.handleSort('impressions'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Impressions\"), React.createElement(Table.HeaderCell, {\n      sorted: column === 'currency' ? direction : null,\n      onClick: this.handleSort('currency'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Currency\"))), React.createElement(Table.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, _.map(data, ({\n      postid,\n      text,\n      clicks,\n      impressions,\n      currency\n    }) => React.createElement(Table.Row, {\n      key: postid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, postid), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, text), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, clicks), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, impressions), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, currency))))));\n  }\n\n}\n\nexport default PostTable;","map":{"version":3,"sources":["/home/michael/Development/limbik/limbik_frontend/src/components/table/index.js"],"names":["_","React","Component","Table","tableData","PostTable","state","column","data","direction","postStringShortener","string","length","slice","concat","getTableData","props","forEach","post","push","postid","id","text","clicks","impressions","currency","spend","amount","handleSort","clickedColumn","setState","sortBy","reverse","render","map"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport React, { Component } from 'react'\nimport { Table } from 'semantic-ui-react'\n\nconst tableData = []\n\n\n\nclass PostTable extends Component {\n\n  state = {\n    column: null,\n    data: tableData,\n    direction: null,\n  }\n\n    postStringShortener = (string) => {\n        if (string && string.length > 50){\n            return string.slice(0, 50).concat('...')\n        } else if (string && string.length < 50) {\n            return string\n        } else {\n            return 'no description'\n        }\n    }\n    \n\n    getTableData = () => {\n        this.props.data.forEach((post)=>{\n            tableData.push({postid: post.id , text: this.postStringShortener(post.text), clicks: post.clicks, impressions: post.impressions, currency : `${post.spend.amount > 0 ? post.spend.amount : ''}  ${post.spend.currency ? post.spend.currency : 'None'}`})\n        })\n    }\n\n  handleSort = clickedColumn => () => {\n    const { column, data, direction } = this.state\n\n    if (column !== clickedColumn) {\n      this.setState({\n        column: clickedColumn,\n        data: _.sortBy(data, [clickedColumn]),\n        direction: 'ascending',\n      })\n\n      return\n    }\n\n    this.setState({\n      data: data.reverse(),\n      direction: direction === 'ascending' ? 'descending' : 'ascending',\n    })\n  }\n\n    render() {\n        this.getTableData()\n      const { column, data, direction } = this.state\n        return (\n            <div className='table'>\n      <Table sortable celled fixed>\n        <Table.Header className='table-head'>\n          <Table.Row className='header-row'>\n              <Table.HeaderCell\n              sorted={column === 'postid' ? direction : null}\n              onClick={this.handleSort('postid')}\n            >\n              Post ID\n            </Table.HeaderCell>\n            <Table.HeaderCell\n              sorted={column === 'text' ? direction : null}\n              onClick={this.handleSort('text')}\n            >\n              Text\n            </Table.HeaderCell>\n            <Table.HeaderCell\n              sorted={column === 'clicks' ? direction : null}\n              onClick={this.handleSort('clicks')}\n            >\n              Clicks\n            </Table.HeaderCell>\n            <Table.HeaderCell\n              sorted={column === 'impressions' ? direction : null}\n              onClick={this.handleSort('impressions')}\n            >\n              Impressions\n            </Table.HeaderCell>\n            <Table.HeaderCell\n              sorted={column === 'currency' ? direction : null}\n              onClick={this.handleSort('currency')}\n            >\n              Currency\n            </Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {_.map(data, ({ postid, text, clicks, impressions, currency }) => (\n            <Table.Row key={postid}>\n              <Table.Cell>{postid}</Table.Cell>\n              <Table.Cell>{text}</Table.Cell>\n              <Table.Cell>{clicks}</Table.Cell>\n              <Table.Cell>{impressions}</Table.Cell>\n              <Table.Cell>{currency}</Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n    </Table>\n    </div>\n    )\n  }\n}\n\nexport default PostTable\n"]},"metadata":{},"sourceType":"module"}