{"ast":null,"code":"var _jsxFileName = \"/home/michael/Development/limbik/limbik_frontend/src/components/search/filterSelect.js\";\nimport React, { Component } from 'react';\nimport { Select } from 'semantic-ui-react';\nconst types = [];\nconst allTypes = {};\n\nclass FilterSelect extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.collectTargetTypes = () => {\n      if (this.props.data) {\n        this.props.data.map(post => {\n          Object.entries(post.targeting).map(item => {\n            if (item[1]) {\n              Object.entries(item[1]).map(value => {\n                value.map(a => {\n                  if (typeof a === 'object') {\n                    a.map(b => {\n                      if (typeof b === 'object') {\n                        b.map(c => {\n                          if (typeof c === 'object') {\n                            c.map(d => {\n                              if (allTypes[\"\".concat(item[0])]) {\n                                if (!allTypes[\"\".concat(item[0])].includes(d)) {\n                                  allTypes[\"\".concat(item[0])].push(d);\n                                }\n                              } else {\n                                allTypes[\"\".concat(item[0])] = [];\n                              }\n                            });\n                          }\n\n                          if (allTypes[\"\".concat(item[0])]) {\n                            if (!allTypes[\"\".concat(item[0])].includes(c)) {\n                              allTypes[\"\".concat(item[0])].push(c);\n                            }\n                          } else {\n                            allTypes[\"\".concat(item[0])] = [];\n                          }\n                        });\n                      }\n\n                      if (allTypes[\"\".concat(item[0])]) {\n                        if (!allTypes[\"\".concat(item[0])].includes(b)) {\n                          allTypes[\"\".concat(item[0])].push(b);\n                        }\n                      } else {\n                        allTypes[\"\".concat(item[0])] = [];\n                      }\n                    });\n                  }\n\n                  if (allTypes[\"\".concat(item[0])]) {\n                    if (!allTypes[\"\".concat(item[0])].includes(a)) {\n                      allTypes[\"\".concat(item[0])].push(a);\n                    }\n                  } else {\n                    allTypes[\"\".concat(item[0])] = [];\n                  }\n                });\n              });\n            }\n          });\n        });\n      }\n\n      console.log(allTypes);\n    };\n\n    this.assignKeys = () => {\n      this.collectTargetTypes();\n    };\n  }\n\n  render() {\n    this.assignKeys();\n    return React.createElement(Select, {\n      compact: true,\n      options: '',\n      defaultValue: \"articles\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default FilterSelect;","map":{"version":3,"sources":["/home/michael/Development/limbik/limbik_frontend/src/components/search/filterSelect.js"],"names":["React","Component","Select","types","allTypes","FilterSelect","collectTargetTypes","props","data","map","post","Object","entries","targeting","item","value","a","b","c","d","includes","push","console","log","assignKeys","render"],"mappings":"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","sourcesContent":["import React ,{ Component } from 'react'\nimport { Select } from 'semantic-ui-react'\n\nconst types = []\n\nconst allTypes = {}\n\nclass FilterSelect extends Component{\n\n    collectTargetTypes = () => {\n        if(this.props.data){\n            this.props.data.map((post)=> {\n                Object.entries(post.targeting).map((item)=>{\n                    if(item[1]){\n                        Object.entries(item[1]).map((value)=>{\n                            value.map((a)=>{\n                                if(typeof(a)==='object'){\n                                    a.map((b)=>{\n                                        if(typeof(b)==='object'){\n                                            b.map((c)=>{\n                                                if(typeof(c)==='object'){\n                                                    c.map((d)=>{\n                                        if(allTypes[`${item[0]}`]){\n                                            if(!allTypes[`${item[0]}`].includes(d)){\n                                                allTypes[`${item[0]}`].push(d)\n                                        }\n                                    }\n                                    else{\n                                        allTypes[`${item[0]}`]=[]\n                                    }\n\n                                                    })\n                                                }\n                                        if(allTypes[`${item[0]}`]){\n                                            if(!allTypes[`${item[0]}`].includes(c)){\n                                                allTypes[`${item[0]}`].push(c)\n                                        }\n                                    }\n                                    else{\n                                        allTypes[`${item[0]}`]=[]\n                                    }\n                                                \n                                            })\n                                        }\n                                        if(allTypes[`${item[0]}`]){\n                                            if(!allTypes[`${item[0]}`].includes(b)){\n                                                allTypes[`${item[0]}`].push(b)\n                                        }\n                                    }\n                                    else{\n                                        allTypes[`${item[0]}`]=[]\n                                    }\n                                    })\n                                }\n                                    if(allTypes[`${item[0]}`]){\n                                        if(!allTypes[`${item[0]}`].includes(a)){\n                                            allTypes[`${item[0]}`].push(a)\n                                        }\n                                    }\n                                    else{\n                                        allTypes[`${item[0]}`]=[]\n                                }\n                            }) \n                        })\n\n                    }\n                })  \n            })\n        }\n        console.log(allTypes)\n    }\n\n    assignKeys = () => {\n        this.collectTargetTypes()\n    }\n\n\n\n    render(){\n        this.assignKeys()\n        return(\n            <Select compact options={''} defaultValue='articles' />\n        )\n    }\n}\n\nexport default FilterSelect\n\n"]},"metadata":{},"sourceType":"module"}