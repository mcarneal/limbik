{"ast":null,"code":"var _jsxFileName = \"/home/michael/Development/limbik/limbik_frontend/src/components/search/filterSelect.js\";\nimport React, { Component } from 'react';\nimport { Select } from 'semantic-ui-react';\nconst types = [];\nconst allTypes = {};\n\nclass FilterSelect extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.collectTargetTypes = () => {\n      if (this.props.data) {\n        this.props.data.map(post => {\n          Object.entries(post.targeting).map(item => {\n            if (item[1]) {\n              Object.entries(item[1]).map(value => {\n                value.map(a => {\n                  if (allTypes[\"\".concat(item[0])]) {\n                    if (!allTypes[\"\".concat(item[0])].includes(a)) {\n                      allTypes[\"\".concat(item[0])].push(a);\n                    }\n                  } else {\n                    allTypes[\"\".concat(item[0])] = [];\n                  }\n                });\n              });\n            }\n          });\n        });\n      }\n\n      console.log(allTypes);\n    };\n\n    this.assignKeys = () => {\n      this.collectTargetTypes();\n      Object.keys(allTypes).map(attribute => {\n        types.push({\n          key: attribute,\n          text: attribute.replace(/_/g, ' '),\n          value: attribute\n        });\n      });\n    };\n  }\n\n  render() {\n    this.assignKeys();\n    return React.createElement(Select, {\n      compact: true,\n      options: types,\n      defaultValue: \"articles\",\n      onChange: e => console.log(e.target.innerText),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default FilterSelect;","map":{"version":3,"sources":["/home/michael/Development/limbik/limbik_frontend/src/components/search/filterSelect.js"],"names":["React","Component","Select","types","allTypes","FilterSelect","collectTargetTypes","props","data","map","post","Object","entries","targeting","item","value","a","includes","push","console","log","assignKeys","keys","attribute","key","text","replace","render","e","target","innerText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,mBAAvB;AAEA,MAAMC,KAAK,GAAG,EAAd;AAEA,MAAMC,QAAQ,GAAG,EAAjB;;AAEA,MAAMC,YAAN,SAA2BJ,SAA3B,CAAoC;AAAA;AAAA;;AAAA,SAEhCK,kBAFgC,GAEX,MAAM;AACvB,UAAG,KAAKC,KAAL,CAAWC,IAAd,EAAmB;AACf,aAAKD,KAAL,CAAWC,IAAX,CAAgBC,GAAhB,CAAqBC,IAAD,IAAS;AACzBC,UAAAA,MAAM,CAACC,OAAP,CAAeF,IAAI,CAACG,SAApB,EAA+BJ,GAA/B,CAAoCK,IAAD,IAAQ;AACvC,gBAAGA,IAAI,CAAC,CAAD,CAAP,EAAW;AACPH,cAAAA,MAAM,CAACC,OAAP,CAAeE,IAAI,CAAC,CAAD,CAAnB,EAAwBL,GAAxB,CAA6BM,KAAD,IAAS;AACjCA,gBAAAA,KAAK,CAACN,GAAN,CAAWO,CAAD,IAAK;AAGP,sBAAGZ,QAAQ,WAAIU,IAAI,CAAC,CAAD,CAAR,EAAX,EAA0B;AACtB,wBAAG,CAACV,QAAQ,WAAIU,IAAI,CAAC,CAAD,CAAR,EAAR,CAAuBG,QAAvB,CAAgCD,CAAhC,CAAJ,EAAuC;AACnCZ,sBAAAA,QAAQ,WAAIU,IAAI,CAAC,CAAD,CAAR,EAAR,CAAuBI,IAAvB,CAA4BF,CAA5B;AACH;AACJ,mBAJD,MAKI;AACAZ,oBAAAA,QAAQ,WAAIU,IAAI,CAAC,CAAD,CAAR,EAAR,GAAuB,EAAvB;AACH;AACJ,iBAXL;AAYH,eAbD;AAeH;AACJ,WAlBD;AAmBH,SApBD;AAqBH;;AACDK,MAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAZ;AACH,KA3B+B;;AAAA,SA6BhCiB,UA7BgC,GA6BnB,MAAM;AACf,WAAKf,kBAAL;AACAK,MAAAA,MAAM,CAACW,IAAP,CAAYlB,QAAZ,EAAsBK,GAAtB,CAA2Bc,SAAD,IAAa;AACnCpB,QAAAA,KAAK,CAACe,IAAN,CAAW;AAACM,UAAAA,GAAG,EAAED,SAAN;AAAiBE,UAAAA,IAAI,EAAEF,SAAS,CAACG,OAAV,CAAkB,IAAlB,EAAuB,GAAvB,CAAvB;AAAoDX,UAAAA,KAAK,EAAGQ;AAA5D,SAAX;AACH,OAFD;AAGH,KAlC+B;AAAA;;AAsChCI,EAAAA,MAAM,GAAE;AACJ,SAAKN,UAAL;AACA,WACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,MAAf;AAAgB,MAAA,OAAO,EAAElB,KAAzB;AAAgC,MAAA,YAAY,EAAC,UAA7C;AAAwD,MAAA,QAAQ,EAAGyB,CAAD,IAAKT,OAAO,CAACC,GAAR,CAAYQ,CAAC,CAACC,MAAF,CAASC,SAArB,CAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AA3C+B;;AA8CpC,eAAezB,YAAf","sourcesContent":["import React ,{ Component } from 'react'\nimport { Select } from 'semantic-ui-react'\n\nconst types = []\n\nconst allTypes = {}\n\nclass FilterSelect extends Component{\n\n    collectTargetTypes = () => {\n        if(this.props.data){\n            this.props.data.map((post)=> {\n                Object.entries(post.targeting).map((item)=>{\n                    if(item[1]){\n                        Object.entries(item[1]).map((value)=>{\n                            value.map((a)=>{\n                                   \n                                \n                                    if(allTypes[`${item[0]}`]){\n                                        if(!allTypes[`${item[0]}`].includes(a)){\n                                            allTypes[`${item[0]}`].push(a)\n                                        }\n                                    }\n                                    else{\n                                        allTypes[`${item[0]}`]=[]\n                                    }\n                                }) \n                        })\n\n                    }\n                })  \n            })\n        }\n        console.log(allTypes)\n    }\n\n    assignKeys = () => {\n        this.collectTargetTypes()\n        Object.keys(allTypes).map((attribute)=>{\n            types.push({key :attribute, text: attribute.replace(/_/g,' '), value : attribute})\n        })\n    }\n\n\n\n    render(){\n        this.assignKeys()\n        return(\n            <Select compact options={types} defaultValue='articles' onChange={(e)=>console.log(e.target.innerText)}/>\n        )\n    }\n}\n\nexport default FilterSelect\n\n"]},"metadata":{},"sourceType":"module"}